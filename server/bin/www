#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var http = require("http");
//var https = require('https');
const fs = require("fs");

const ENV_NODE = require("../config/mode"); // 임시 처리
console.log(ENV_NODE);

/* *
    aws http 설정
*/
var server = http.createServer(app);
//server.listen(3000);
http.createServer(app).listen(3000);

/**
     HTTPS 설정
 */
/* if(ENV_NODE === 'production'){
  const options = { // letsencrypt로 받은 인증서 경로를 입력해 줍니다.
    ca: fs.readFileSync('/etc/letsencrypt/live/ec2.inventoryboxserver.com/fullchain.pem'),
    key: fs.readFileSync('/etc/letsencrypt/live/ec2.inventoryboxserver.com/privkey.pem'),
    cert: fs.readFileSync('/etc/letsencrypt/live/ec2.inventoryboxserver.com/cert.pem')
    };

    var server = http.createServer(app);
    try{
      http.get('*', function(req, res) {
        console.log('insert http -> https');  
        res.redirect('https://' + req.headers.host + req.url);
        }).on("error", function(error){
          console.log(error.message);
        });
      }catch(e){
        console.log(e);
      }
    server.listen(3000);

    https.createServer(options, app).listen(443);

    }else
    {
      http.createServer(app).listen(3000);
    } */
// var lex = require('greenlock-express').create({
//   version: 'v02',
//   configDir: '/etc/letsencrypt',
//   server: 'https://acme-v02.api.letsencrypt.org/directory',
//   email: 'neity16@daum.net',
//   approveDomains: ['ec2.inventoryboxserver.com'],
//   agreeTos: true,
//   renewWithin: 81 * 24 * 60 * 60 * 1000,
//   renewBy: 80 * 24 * 60 * 60 * 1000,
//   app: app });

//   https.createServer(lex.httpsOptions, lex.middleware(app).listen(3000));
//   http.createServer(lex.middleware(require('redirect-https')())).listen(process.env.PORT || 80);

/**
 * Get port from environment and store in Express.
 */

//1 var port = normalizePort(process.env.PORT || '3000');
//2 app.set('port', port);

/**
 * Create HTTP server.
 */

//3 var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

//4 server.listen(port);

// server.on('error', onError);
// server.on('listening', onListening);

// /**
//  * Normalize a port into a number, string, or false.
//  */

// function normalizePort(val) {
//   var port = parseInt(val, 10);

//   if (isNaN(port)) {
//     // named pipe
//     return val;
//   }

//   if (port >= 0) {
//     // port number
//     return port;
//   }

//   return false;
// }

// /**
//  * Event listener for HTTP server "error" event.
//  */

// function onError(error) {
//   if (error.syscall !== 'listen') {
//     throw error;
//   }

//   var bind = typeof port === 'string'
//     ? 'Pipe ' + port
//     : 'Port ' + port;

//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//     case 'EACCES':
//       console.error(bind + ' requires elevated privileges');
//       process.exit(1);
//       break;
//     case 'EADDRINUSE':
//       console.error(bind + ' is already in use');
//       process.exit(1);
//       break;
//     default:
//       throw error;
//   }
// }

// /**
//  * Event listener for HTTP server "listening" event.
//  */

// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   debug('Listening on ' + bind);
// }
